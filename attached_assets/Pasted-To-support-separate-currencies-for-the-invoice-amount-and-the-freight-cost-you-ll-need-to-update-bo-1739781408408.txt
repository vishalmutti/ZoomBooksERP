To support separate currencies for the invoice amount and the freight cost, you’ll need to update both your data model and your UI. Here’s a roadmap to help you achieve that:

---

### 1. Update Your Data Model

**a. Database Schema:**

- **Current state:** Your invoice record likely has one currency field that applies to both the invoice amount and the freight cost.
- **Proposed change:** Add a second field (e.g., `freightCurrency`) to store the freight cost’s currency. Your invoice record might then look something like this:

```typescript
interface Invoice {
  id: number;
  amount: number;
  amountCurrency: string;  // e.g., "USD"
  freightCost: number;
  freightCurrency: string; // e.g., "CAD"
  // other fields…
}
```

If you’re using an ORM like Drizzle, you’ll need to create a migration that adds the new column to your invoices table.

---

### 2. Modify the Invoice Form UI

**a. Form Inputs:**

- **Current state:** Your invoice form includes a single currency selector/input.
- **Proposed change:** Add an additional selector for the freight cost currency. For example, if you’re using a component-based approach (e.g., in React), you could extend your state to manage two separate currency values:

```tsx
const [invoiceData, setInvoiceData] = useState({
  amount: 0,
  amountCurrency: 'USD',
  freightCost: 0,
  freightCurrency: 'CAD'
});
```

And update your form with two dropdowns or input fields so the user can select each currency independently.

**b. Handling Changes:**

Make sure that when the user selects a currency for either field, your form state updates correctly. This might involve having two separate `onChange` handlers or a unified handler that distinguishes between the two fields.

---

### 3. Adjust the Invoices Table/List Display

In your invoices table or list component, update the rendering logic to display both currency fields alongside their respective amounts. This might involve:

- Formatting the `amount` with `amountCurrency` (e.g., using a formatting library or custom utility function).
- Formatting the `freightCost` with `freightCurrency`.

For example:

```tsx
function formatCurrency(value: number, currency: string) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency
  }).format(value);
}
```

And then in your table:

```tsx
<td>{formatCurrency(invoice.amount, invoice.amountCurrency)}</td>
<td>{formatCurrency(invoice.freightCost, invoice.freightCurrency)}</td>
```

---

### 4. Update the Server-Side Logic

Ensure that your API endpoint that handles invoice creation or updates accepts both currency values. Update your validation logic to check that each currency field is valid and store them in your database accordingly.

---

### 5. Testing and Validation

After making these changes:
- Test the form to ensure that the right values are sent to the server.
- Validate that the invoice list displays both currencies correctly.
- If your application requires currency conversion or calculations, review those functions to ensure they consider both currency fields appropriately.

---

By splitting the currency fields for the invoice amount and freight cost, you provide more flexibility and accuracy in financial records. If you need further help with specific code implementations or run into any issues, feel free to ask!