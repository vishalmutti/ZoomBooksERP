I was able to fix the issue. But when the entry goes to the carriertable, the entry does not include the freight invoice and the POD (file on the invoiceform)
ChatGPT said:
I'm glad to hear you've resolved the initial issue. Regarding the current problem where the freight invoice and Proof of Delivery (POD) are not being included in the carrierTable, it seems there might be an issue with how files are being handled during the form submission and processing. Here's how you can address this:

1. Ensure Proper Form Data Submission:

Form Encoding: Verify that your HTML form includes the attribute enctype="multipart/form-data". This encoding type is necessary for forms that upload files.

html
Copy
Edit
<form action="/your-endpoint" method="post" enctype="multipart/form-data">
  <!-- form fields -->
</form>
Field Names: Ensure that the name attributes of your file input fields match the names expected by your server. For example:

html
Copy
Edit
<input type="file" name="freightInvoice" />
<input type="file" name="pod" />
2. Configure Multer Middleware Correctly:

Multer is a middleware for handling multipart/form-data, primarily used for uploading files in Node.js and Express applications. To handle multiple files, configure Multer as follows:

javascript
Copy
Edit
const multer = require('multer');

// Set up storage configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify the directory to save the uploaded files
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname); // Customize the filename
  }
});

// Initialize multer with the storage configuration
const upload = multer({ storage: storage });

// Define the route to handle form submission with file uploads
app.post('/your-endpoint', upload.fields([
  { name: 'freightInvoice', maxCount: 1 },
  { name: 'pod', maxCount: 1 }
]), (req, res) => {
  // Access the uploaded files and form data
  const freightInvoiceFile = req.files['freightInvoice'] ? req.files['freightInvoice'][0] : null;
  const podFile = req.files['pod'] ? req.files['pod'][0] : null;
  const formData = req.body; // Access other form fields

  // Proceed with your logic to handle the uploaded files and form data
  // For example, save file information to the database, move files, etc.

  // Send a response back to the client
  res.send('Files uploaded successfully');
});
3. Order of Middleware:

Ensure that the Multer middleware is placed before your route handlers that process the form data. This setup allows Multer to parse the incoming multipart/form-data and populate req.files and req.body accordingly.

4. Accessing Uploaded Files and Form Data:

Within your route handler, after Multer has processed the incoming data, you can access:

Files: Available in req.files. For example, req.files['freightInvoice'] will contain an array of files uploaded with the name freightInvoice.

Other Form Data: Available in req.body. Ensure that any text fields are correctly named and sent along with the file uploads.

5. Common Pitfalls:

Order of Form Fields: The order in which the client sends fields and files can affect how req.body is populated. If files are sent before text fields, req.body might not contain the expected data when processing the files. Ensure that text fields are sent before file fields in the form. 
GITHUB.COM

File Validation: Implement validation to check if the files are correctly uploaded and meet your requirements (e.g., file type, size).

By following these steps, you should be able to ensure that the freight invoice and POD files are correctly uploaded and included in your carrierTable. If issues persist, consider adding logging to inspect the contents of req.body and req.files during form submission to debug effectively.