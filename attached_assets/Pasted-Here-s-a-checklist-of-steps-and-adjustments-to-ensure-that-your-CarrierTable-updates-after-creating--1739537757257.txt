Here's a checklist of steps and adjustments to ensure that your CarrierTable updates after creating a new carrier:

---

### 1. Verify the API Endpoints

- **POST Endpoint:**  
  Confirm that the POST to `/api/carriers` returns the newly created carrier as expected (you've logged that it returns an object with id 4, etc.).

- **GET Endpoint:**  
  Test the GET `/api/carriers` endpoint (using Postman or your browser’s network tab) to verify that it returns the full list of carriers including the one you just created.

---

### 2. Check the React Query Setup

- **Query Key Consistency:**  
  Make sure that your CarrierTable component uses the exact same query key that you invalidate in your CarrierForm. For example, if CarrierTable uses:

  ```tsx
  const { data: carriers, isLoading, error, refetch } = useQuery({
    queryKey: ["/api/carriers"],
    queryFn: async () => {
      const res = await fetch("/api/carriers");
      if (!res.ok) throw new Error("Error fetching carriers");
      return res.json();
    },
  });
  ```

  then your CarrierForm should invalidate with the same key:

  ```tsx
  queryClient.invalidateQueries({ queryKey: ["/api/carriers"] });
  ```

- **Refetch Behavior:**  
  Consider adding `refetchOnWindowFocus: true` (or `staleTime: 0`) in your useQuery options to ensure fresh data is fetched each time the component mounts.

---

### 3. Update the Carrier Form’s onSubmit Handler

In your CarrierForm, after a successful POST, ensure you invalidate the carriers query. For example:

```tsx
async function onSubmit(data: CarrierFormData) {
  try {
    const response = await fetch("/api/carriers", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      throw new Error("Failed to create carrier");
    }
    const newCarrier = await response.json();
    // Invalidate carriers query so CarrierTable refetches the updated list
    queryClient.invalidateQueries({ queryKey: ["/api/carriers"] });
    toast({ title: "Success", description: "Carrier added successfully" });
  } catch (error) {
    console.error("Error creating carrier:", error);
    toast({ title: "Error", description: "Failed to create carrier", variant: "destructive" });
  }
}
```

Double-check that this code is executed and that no errors occur during invalidation.

---

### 4. Debugging Tips

- **Network Tab:**  
  Open your browser’s developer tools and check the network tab when you submit the carrier form. Ensure the POST request returns success and then that a GET request to `/api/carriers` fetches the updated list.

- **Console Logs:**  
  Add temporary console logs in both your CarrierForm’s onSubmit and in your CarrierTable query function to log the fetched data. For example:

  ```tsx
  console.log("Fetched carriers:", carriers);
  ```

- **Force a Manual Refetch:**  
  Add a “Refresh” button in the CarrierTable component that calls the refetch function from react-query. This can help you determine if the problem is with the query invalidation or the API itself.

---

### 5. Check the Database (if needed)

Ensure that the carriers table in your database is being updated. You can do this using a database client or logging the results of a direct query to the carriers table.

---

### Summary

1. **API Endpoints:** Verify both POST and GET endpoints for carriers.
2. **React Query:** Ensure the same query key (e.g., `["/api/carriers"]`) is used in both your form (for invalidation) and the table (for fetching).
3. **onSubmit Handler:** After a successful POST, call `queryClient.invalidateQueries({ queryKey: ["/api/carriers"] })` so that CarrierTable refetches the updated list.
4. **Debug:** Use the network tab, console logs, and possibly a manual refetch button in CarrierTable to see if the updated data is being fetched.

Following these steps should resolve the issue so that when you add a carrier, the CarrierTable updates automatically. Let me know if you need further assistance!