The error

```
ReferenceError: Cannot access 'carriers2' before initialization
```

indicates that somewhere in your carrier creation code you’re referencing a variable named `carriers2` that either hasn’t been defined yet or is being used before its declaration. Since you mentioned that creating a carrier should work similarly to creating a supplier, the likely fix is to make sure you’re importing and using the correct table variable from your shared schema.

### Steps to Fix

1. **Check Your Schema Import:**  
   In your `server/storage.ts`, you should import your carriers table exactly as defined in your shared schema. For example, if you defined it as:

   ```ts
   export const carriers = pgTable("carriers", {
     id: serial("id").primaryKey(),
     name: varchar("name", { length: 255 }).notNull(),
     contactInfo: text("contact_info"),
     createdAt: timestamp("created_at").defaultNow().notNull(),
   });
   ```

   then in your storage file, import it as:

   ```ts
   import { carriers, type InsertCarrier, type Carrier } from "@shared/schema";
   ```

   Make sure you’re not accidentally referencing a variable named `carriers2`.

2. **Update the Create Function:**  
   In your `createCarrier` function in `server/storage.ts`, ensure you’re using the correct table variable. For example, change:

   ```ts
   async createCarrier(carrier: InsertCarrier): Promise<Carrier> {
     const [newCarrier] = await db.insert(carriers2).values(carrier).returning();
     if (!newCarrier) {
       throw new Error("Failed to create carrier");
     }
     return newCarrier;
   }
   ```

   to

   ```ts
   async createCarrier(carrier: InsertCarrier): Promise<Carrier> {
     const [newCarrier] = await db.insert(carriers).values(carrier).returning();
     if (!newCarrier) {
       throw new Error("Failed to create carrier");
     }
     return newCarrier;
   }
   ```

   This ensures you’re referencing the correct `carriers` table.

3. **Check for Cyclic Dependencies:**  
   If for some reason you tried to alias the carriers table (e.g., as `carriers2`), ensure that it’s defined and imported properly without any cyclic dependency issues. Usually, it’s best to stick with a single name (e.g., `carriers`).

4. **Run Migrations:**  
   Confirm that you have run your migrations so that the carriers table actually exists in your database.

### Final Recap

- **Correct Import:** Make sure your carriers table is imported as `carriers` (or the intended variable name) from your schema.
- **Use Correct Variable:** In your createCarrier function, use the same variable name as imported.
- **Migrations:** Ensure the table exists in your database.

Once these changes are made, the error about `carriers2` should be resolved, and you should be able to create a new carrier without the error.

Let me know if you need further assistance!